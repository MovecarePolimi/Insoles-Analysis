%function [GR_L,GR_R,...
function [...
  Event_L,FirstContact_L,FootFlat_L,LastContact_L,Step_time_L,Stride_time_L,Swing_time_L, ...
  Stance_time_L,Supp_time_Double_L,Stride_velocity_L, ...
  Event_R,FirstContact_R,FootFlat_R,LastContact_R,Step_time_R,Stride_time_R,Swing_time_R, ...
  Stance_time_R,Supp_time_Double_R,Stride_velocity_R ...
  ] = importGaitRite(workbookFile,sheetName,startRow,endRow)
%IMPORTFILE Import data from a spreadsheet
%   [Event1,Foot1,FirstContact1,FootFlat1,LastContact1,Step_time1,Stride_time1,Swing_time1,Stance_time1,Supp_time_Single1,Supp_time_Double1,Stride_velocity1]
%   = IMPORTFILE(FILE) reads data from the first worksheet in the Microsoft
%   Excel spreadsheet file named FILE and returns the data as column
%   vectors.
%
%   [Event1,Foot1,FirstContact1,FootFlat1,LastContact1,Step_time1,Stride_time1,Swing_time1,Stance_time1,Supp_time_Single1,Supp_time_Double1,Stride_velocity1]
%   = IMPORTFILE(FILE,SHEET) reads from the specified worksheet.
%
%   [Event1,Foot1,FirstContact1,FootFlat1,LastContact1,Step_time1,Stride_time1,Swing_time1,Stance_time1,Supp_time_Single1,Supp_time_Double1,Stride_velocity1]
%   = IMPORTFILE(FILE,SHEET,STARTROW,ENDROW) reads from the specified
%   worksheet for the specified row interval(s). Specify STARTROW and
%   ENDROW as a pair of scalars or vectors of matching size for
%   dis-contiguous row intervals. To read to the end of the file specify an
%   ENDROW of inf.
%
%	Non-numeric cells are replaced with: NaN
%
% Example:
%   [Event1,Foot1,FirstContact1,FootFlat1,LastContact1,Step_time1,Stride_time1,Swing_time1,Stance_time1,Supp_time_Single1,Supp_time_Double1,Stride_velocity1] = importfile('FootDetailSimo1.ods','FootDetailSimo1',3,10);
%
%   See also XLSREAD.

% Auto-generated by MATLAB on 2018/02/07 11:52:53

%% Input handling

% If no sheet is specified, read first sheet
if nargin == 1 || isempty(sheetName)
    sheetName = 1;
end

% If row start and end points are not specified, define defaults
if nargin <= 3
    startRow = 3;
    endRow = 11;
end

%% Import the data
[~, ~, raw1] = xlsread(workbookFile, sheetName, sprintf('E%d:F%d',startRow(1),endRow(1)));
[~, ~, raw2] = xlsread(workbookFile, sheetName, sprintf('M%d:O%d',startRow(1),endRow(1)));
[~, ~, raw3] = xlsread(workbookFile, sheetName, sprintf('S%d:Y%d',startRow(1),endRow(1)));
raw = [raw1,raw2,raw3];
for block=2:length(startRow)
    [~, ~, tmpRawBlock1] = xlsread(workbookFile, sheetName, sprintf('E%d:F%d',startRow(block),endRow(block)));
    [~, ~, tmpRawBlock2] = xlsread(workbookFile, sheetName, sprintf('M%d:O%d',startRow(block),endRow(block)));
    [~, ~, tmpRawBlock3] = xlsread(workbookFile, sheetName, sprintf('S%d:Y%d',startRow(block),endRow(block)));
    raw = [raw;tmpRawBlock1,tmpRawBlock2,tmpRawBlock3]; %#ok<AGROW>
end
raw(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),raw)) = {''};

%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
I = cellfun(@(x) ischar(x), raw);
raw(I) = {NaN};
data = reshape([raw{:}],size(raw));

%% Allocate imported array to column variable names
Event = data(:,1);
Foot = data(:,2);
FirstContact = data(:,3);
FootFlat = data(:,4);
LastContact = data(:,5);
Step_time = data(:,6);
Stride_time = data(:,7);
Swing_time = data(:,8);
Stance_time = data(:,9);
Supp_time_Double = data(:,11);
Stride_velocity = data(:,12);

Ind_L = find(Foot == 0); 
Ind_R = find(Foot == 1);

Event_L = Event(Ind_L);
Event_R = Event(Ind_R);
FirstContact_L = FirstContact(Ind_L);
FirstContact_R = FirstContact(Ind_R);
FootFlat_L = FootFlat(Ind_L);
FootFlat_R = FootFlat(Ind_R);
LastContact_L = LastContact(Ind_L);
LastContact_R = LastContact(Ind_R);

Step_time_L = Step_time(Ind_L);
Step_time_L = Step_time_L(Step_time_L ~= 0);

Step_time_R = Step_time(Ind_R);
Step_time_R = Step_time_R(Step_time_R ~= 0);

Stride_time_L = Stride_time(Ind_L);
Stride_time_L = Stride_time_L(Stride_time_L ~= 0);

Stride_time_R = Stride_time(Ind_R);
Stride_time_R = Stride_time_R(Stride_time_R ~= 0);

Swing_time_L = Swing_time(Ind_L);
Swing_time_L = Swing_time_L(Swing_time_L ~= 0);

Swing_time_R = Swing_time(Ind_R);
Swing_time_R = Swing_time_R(Swing_time_R ~= 0);

Stance_time_L = Stance_time(Ind_L);
Stance_time_L = Stance_time_L(Stance_time_L ~= 0);

Stance_time_R = Stance_time(Ind_R);
Stance_time_R = Stance_time_R(Stance_time_R ~= 0);

%{
    Supp_time_Single_L = Supp_time_Single(Ind_L);
    Supp_time_Single_R = Supp_time_Single(Ind_R);
%}
%%%% NB: Double Support ha gli indici invertiti (Ind_R per DS_L e Ind_L per 
%%%% DS_R) perchè il GR li anticipa di 1 passo (al passo 2 - e non al 3 - già 
%%%% calcola il DS del ciclo di gait destro e così via)
Supp_time_Double_L = Supp_time_Double(Ind_R);
Supp_time_Double_L = Supp_time_Double_L(Supp_time_Double_L ~= 0);

Supp_time_Double_R = Supp_time_Double(Ind_L);
Supp_time_Double_R = Supp_time_Double_R(Supp_time_Double_R ~= 0);

Stride_velocity_L = Stride_velocity(Ind_L);
Stride_velocity_R = Stride_velocity(Ind_R);

%GR_L = horzcat(Event_L, FirstContact_L, FootFlat_L, LastContact_L, Step_time_L, Stride_time_L, Swing_time_L,Stance_time_L, Supp_time_Single_L, Supp_time_Double_L, Stride_velocity_L);
%GR_R = horzcat(Event_R, FirstContact_R, FootFlat_R, LastContact_R, Step_time_R, Stride_time_R, Swing_time_R,Stance_time_R, Supp_time_Single_R, Supp_time_Double_R, Stride_velocity_R);